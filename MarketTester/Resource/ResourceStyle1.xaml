<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:MarketTester.Resource"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:converter="clr-namespace:MarketTester.Converters">
    <!--Converters-->
    <converter:DoubleConverter x:Key="DoubleConverter"/>


    <SolidColorBrush x:Key="ColorBuy">#35af71</SolidColorBrush>
    <SolidColorBrush x:Key="ColorSell">#bd0303</SolidColorBrush>
    <sys:Double x:Key="OrderEntryMargin">10</sys:Double>
    <sys:Double x:Key="OrderEntryWidth">220</sys:Double>
    <sys:Double x:Key="OrderEntryHeight">90</sys:Double>
    <SolidColorBrush x:Key="BackgroundPrimary">#373740</SolidColorBrush>
    <Color x:Key="BackgroundPrimaryColor">#373740</Color>
    <SolidColorBrush x:Key="BackgroundSecondary">#585861</SolidColorBrush>
    <Color x:Key="BackgroundSecondaryColor">#585861</Color>
    <SolidColorBrush x:Key="BackgroundTernary">#FF97A0A5</SolidColorBrush>
    <SolidColorBrush x:Key="DetailColor">#888888</SolidColorBrush>
    <!--<SolidColorBrush x:Key="TextColor">#d6f4e8</SolidColorBrush>-->
    <SolidColorBrush x:Key="TextColor">#ebebeb</SolidColorBrush>
    <SolidColorBrush x:Key="ForegroundPrimary">#1D645A</SolidColorBrush>
    <SolidColorBrush x:Key="TextColorDark">#010101</SolidColorBrush>
    <SolidColorBrush x:Key="ActiveYellow">#ffcf44</SolidColorBrush>
    <Color x:Key="ActiveYellowColor">#ffcf44</Color>
    <SolidColorBrush x:Key="ActiveGreen">#149414</SolidColorBrush>
    <SolidColorBrush x:Key="InactiveRed">#b53737</SolidColorBrush>
    <sys:Int32 x:Key="ToolTipDuration">100000</sys:Int32>
    
    
    <!--Tool tip -->
    <Style TargetType="ToolTip">
        <Setter Property="Background" Value="{DynamicResource BackgroundSecondary}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BackgroundTernary}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextColor}"/>
        <Setter Property="MaxWidth" Value="300"/>
        <Style.Resources>
            <Style TargetType="ContentPresenter">
                <Style.Resources>
                    <Style TargetType="TextBlock">
                        <Setter Property="TextWrapping" Value="Wrap" />
                    </Style>
                </Style.Resources>
            </Style>
        </Style.Resources>
    </Style>

    <!-- CheckBox -->
    <Style TargetType="CheckBox">
        <Setter Property="Background" Value="{DynamicResource BackgroundSecondary}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BackgroundTernary}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextColor}"/>
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource ToolTipDuration}"/>
        <Setter Property="TextBlock.TextWrapping" Value="WrapWithOverflow"/>
    </Style>
    
    


    <!-- DataGrid -->
    <Style TargetType="DataGrid">
        <Setter Property="Background" Value="{DynamicResource BackgroundPrimary}"/>
        <Setter Property="AlternatingRowBackground" Value="{DynamicResource BackgroundSecondary}"/>
        <Setter Property="RowBackground" Value="{DynamicResource BackgroundPrimary}"/>
        <Setter Property="AlternationCount" Value="2"/>
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Path=Foreground}"/>
        <Setter Property="AllowDrop" Value="False"/>
        <Setter Property="RowHeaderWidth" Value="0"/>
        <Setter Property="IsSynchronizedWithCurrentItem" Value="True"/>
        <Setter Property="CanUserAddRows" Value="False"/>
        <Setter Property="CanUserDeleteRows" Value="False"/>
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource ToolTipDuration}"/>
    </Style>

    <Style TargetType="{x:Type DataGridCell}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Grid Background="{TemplateBinding Background}">
                        <ContentPresenter VerticalAlignment="Center" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style BasedOn="{StaticResource {x:Type DataGridColumnHeader}}" TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="Background" Value="{StaticResource BackgroundSecondary}" />
        <Setter Property="BorderBrush" Value="{StaticResource BackgroundTernary}"/>
        <Setter Property="BorderThickness" Value="1,3,1,3"/>
        <Setter Property="Padding" Value="3,2,3,2"/>
    </Style>


    <!-- Context Menu -->
    <Style TargetType="{x:Type ContextMenu}">
        <Setter Property="SnapsToDevicePixels"
          Value="True" />
        <Setter Property="OverridesDefaultStyle"
          Value="True" />
        <Setter Property="Grid.IsSharedSizeScope"
          Value="true" />
        <Setter Property="HasDropShadow"
          Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border x:Name="Border"
                            Background="{StaticResource BackgroundPrimary}"
                            BorderThickness="1"
                            BorderBrush="{DynamicResource BackgroundTernary}">

                        <StackPanel IsItemsHost="True"
                      KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--Menu-->
    <!--<Style TargetType="Menu">
        <Setter Property="SnapsToDevicePixels"
          Value="True" />
        <Setter Property="Grid.IsSharedSizeScope"
          Value="True" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <VirtualizingStackPanel Orientation="Horizontal"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <Border x:Name="Border"
                            Background="{StaticResource BackgroundPrimary}"
                            BorderThickness="1"
                            BorderBrush="{DynamicResource BackgroundTernary}">

                        <StackPanel IsItemsHost="True"
                      KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->

    <Style TargetType="MenuItem">
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource ToolTipDuration}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextColor}"/>
        <Setter Property="Background" Value="{DynamicResource BackgroundSecondary}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BackgroundTernary}"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{Binding}" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="LightSlateGray"/>
            </Trigger>
        </Style.Triggers>
        
    </Style>

    <!--Sroll Bar -->
   

    <Style x:Key="ScrollBarLineButton"
       TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels"
          Value="True" />
        <Setter Property="OverridesDefaultStyle"
          Value="true" />
        <Setter Property="Focusable"
          Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border x:Name="Border"
                Margin="2"
                Background="{DynamicResource BackgroundSecondary}">
                        <Path x:Name="Arrow"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Data="{Binding Content, 
                            RelativeSource={RelativeSource TemplatedParent}}" >     
                            <Path.Fill>
                                <SolidColorBrush Color="{DynamicResource BackgroundPrimaryColor}"/>
                            </Path.Fill>
                        </Path>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScrollBarPageButton"
       TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels"
          Value="True" />
        <Setter Property="OverridesDefaultStyle"
          Value="true" />
        <Setter Property="IsTabStop"
          Value="false" />
        <Setter Property="Focusable"
          Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="Transparent" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScrollBarThumb"
       TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels"
          Value="True" />
        <Setter Property="OverridesDefaultStyle"
          Value="true" />
        <Setter Property="IsTabStop"
          Value="false" />
        <Setter Property="Focusable"
          Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border 
                Background="{StaticResource BackgroundSecondary}"/>
                    
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="VerticalScrollBar"
                 TargetType="{x:Type ScrollBar}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition MaxHeight="18" />
                <RowDefinition Height="0.00001*" />
                <RowDefinition MaxHeight="18" />
            </Grid.RowDefinitions>
            <Border Grid.RowSpan="3"
            CornerRadius="2"
            Background="{DynamicResource BackgroundTernary}" />
            <RepeatButton Grid.Row="0"
                  Style="{StaticResource ScrollBarLineButton}"
                  Height="18"
                  Command="ScrollBar.LineUpCommand"
                  Content="M 0 4 L 8 4 L 4 0 Z" />
            <Track x:Name="PART_Track"
           Grid.Row="1"
           IsDirectionReversed="true">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}"
                      Command="ScrollBar.PageUpCommand" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Style="{StaticResource ScrollBarThumb}"
               Margin="2,0,2,0">
                        
                    </Thumb>
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}"
                      Command="ScrollBar.PageDownCommand" />
                </Track.IncreaseRepeatButton>
            </Track>
            <RepeatButton Grid.Row="2"
                  Style="{StaticResource ScrollBarLineButton}"
                  Height="18"
                  Command="ScrollBar.LineDownCommand"
                  Content="M 0 0 L 4 4 L 8 0 Z" />
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="HorizontalScrollBar"
                 TargetType="{x:Type ScrollBar}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition MaxWidth="18" />
                <ColumnDefinition Width="0.00001*" />
                <ColumnDefinition MaxWidth="18" />
            </Grid.ColumnDefinitions>
            <Border Grid.ColumnSpan="3"
            CornerRadius="2"
            Background="{DynamicResource BackgroundTernary}" />
            <RepeatButton Grid.Column="0"
                  Style="{StaticResource ScrollBarLineButton}"
                  Width="18"
                  Command="ScrollBar.LineLeftCommand"
                  Content="M 4 0 L 4 8 L 0 4 Z" />
            <Track x:Name="PART_Track"
           Grid.Column="1"
           IsDirectionReversed="False">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}"
                      Command="ScrollBar.PageLeftCommand" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Style="{StaticResource ScrollBarThumb}"
               Margin="0,2,0,2">
                        
                    </Thumb>
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}"
                      Command="ScrollBar.PageRightCommand" />
                </Track.IncreaseRepeatButton>
            </Track>
            <RepeatButton Grid.Column="2"
                  Style="{StaticResource ScrollBarLineButton}"
                  Width="18"
                  Command="ScrollBar.LineRightCommand"
                  Content="M 0 0 L 4 4 L 0 8 Z" />
        </Grid>
    </ControlTemplate>

    <Style x:Key="{x:Type ScrollBar}"
       TargetType="{x:Type ScrollBar}">
        <Setter Property="SnapsToDevicePixels"
          Value="True" />
        <Setter Property="OverridesDefaultStyle"
          Value="true" />
        <Style.Triggers>
            <Trigger Property="Orientation"
             Value="Horizontal">
                <Setter Property="Width"
              Value="Auto" />
                <Setter Property="Height"
              Value="18" />
                <Setter Property="Template"
              Value="{StaticResource HorizontalScrollBar}" />
            </Trigger>
            <Trigger Property="Orientation"
             Value="Vertical">
                <Setter Property="Width"
              Value="18" />
                <Setter Property="Height"
              Value="Auto" />
                <Setter Property="Template"
              Value="{StaticResource VerticalScrollBar}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    
    

    <!-- Font -->
    <Style TargetType="{x:Type Window}">
        <Setter Property="Foreground" Value="{StaticResource TextColor}"/>
    </Style>

    <Style TargetType="{x:Type TextBlock}">
        <Setter Property="FontFamily" Value="Segoe UI" />
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Foreground" Value="{StaticResource TextColor}"/>
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource ToolTipDuration}"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
    </Style>

    <!-- ListView -->
    <Style TargetType="{x:Type ListView}">
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource ToolTipDuration}"/>
    </Style>

    <!--<Style TargetType="ListViewItem">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"
                            Margin="{TemplateBinding Margin}">
                        <ContentPresenter Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Margin="{TemplateBinding Padding}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->

    <!-- TextBox Style-->
    <Style TargetType="TextBox">
        <Setter Property="Background" Value="{StaticResource BackgroundSecondary}"/>
        <Setter Property="FontFamily" Value="Segoe UI" />
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="Margin" Value="5,0,5,0"/>
        <Setter Property="Foreground" Value="{StaticResource TextColor}"/>
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource ToolTipDuration}"/>
    </Style>

    <!-- Button Style-->
    <Style TargetType="Button">
        <Setter Property="Background" Value="{StaticResource BackgroundSecondary}"/>
        <Setter Property="FontFamily" Value="Segoe UI" />
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Foreground" Value="{StaticResource TextColor}"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="Width" Value="100"/>
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource ToolTipDuration}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"
                            Margin="{TemplateBinding Margin}">
                        <ContentPresenter Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Margin="{TemplateBinding Padding}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"  Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="StoryboardToActive">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetProperty="Background.(SolidColorBrush.Color)" To="{StaticResource ActiveYellowColor}"
                                        FillBehavior="HoldEnd" 
                                    Duration="0:0:0.200"/>
                                        
                                        <DoubleAnimation Storyboard.TargetProperty="Background.Opacity" To="0.7" Duration="0:0:0.200"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <RemoveStoryboard BeginStoryboardName="StoryboardToActive"/>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource BackgroundTernary}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="ButtonRound" TargetType="Button">
        <Setter Property="Background" Value="DodgerBlue" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border CornerRadius="20" Background="{TemplateBinding Background}" BorderThickness="1">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center">

                        </ContentPresenter>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource ToolTipDuration}"/>
    </Style>

    <Style x:Key="ButtonSwitchSide" TargetType="Button">
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource ToolTipDuration}"/>
        <Setter Property="Background" Value="{Binding SideColor}"/>
        <Setter Property="Command" Value="{Binding CommandSwitchSide}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"
                            Margin="{TemplateBinding Margin}">
                        <ContentPresenter Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Margin="{TemplateBinding Padding}" HorizontalAlignment="Center" VerticalAlignment="Center"/>

                    </Border>
                    <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver"  Value="True">
                                <Trigger.EnterActions>
                                    <BeginStoryboard x:Name="StoryboardToActive">
                                        <Storyboard>
                                            <ColorAnimation Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)" To="{StaticResource ActiveYellowColor}"
                                        FillBehavior="HoldEnd" 
                                    Duration="0:0:0.200"/>

                                        <DoubleAnimation Storyboard.TargetProperty="BorderBrush.Opacity" To="0.7" Duration="0:0:0.200"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <RemoveStoryboard BeginStoryboardName="StoryboardToActive"/>
                                </Trigger.ExitActions>
                            </Trigger>
                        </ControlTemplate.Triggers>             
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <!-- RadioButton Style-->
    <Style x:Key="RadioButtonGeneral" TargetType="{x:Type RadioButton}">
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource ToolTipDuration}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                        <Grid>
                            <Ellipse Width="12" Height="12" Fill="{StaticResource BackgroundSecondary}"
                             Stroke="{TemplateBinding BorderBrush}"
                             StrokeThickness="{TemplateBinding BorderThickness}"/>
                            <Ellipse x:Name="Checked" Width="8" Height="8" Visibility="Collapsed" Fill="{StaticResource ActiveYellow}"/>
                        </Grid>
                        <Label Margin="0 0 0 0" Content="{TemplateBinding Content}"
                       Foreground="{StaticResource TextColor}"/>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Checked" Property="Visibility" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--ComboBox Style-->
    <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="4*" />
                <ColumnDefinition Width="1*"/>
            </Grid.ColumnDefinitions>
            <Border
                  x:Name="Border" 
                  Grid.ColumnSpan="2"
                  CornerRadius="0"
                  Background="{StaticResource BackgroundSecondary}"
                  BorderBrush="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ComboBox}}, Path=BorderBrush}"
                  BorderThickness="1" />
            <Border 
                  Grid.Column="0"
                  CornerRadius="0" 
                  Margin="1" 
                  BorderBrush="{DynamicResource BackgroundTernary}"
                  BorderThickness="0,0,1,0" />
            <Path 
                  x:Name="Arrow"
                  Grid.Column="1"     
                  Fill="White"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z"
                />
        </Grid>
        <!--<ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsMouseOver" Value="true">
                <Setter TargetName="Border" Property="Background" Value="#808080" />
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
                <Setter TargetName="Border" Property="Background" Value="#E0E0E0" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="Border" Property="Background" Value="#EEEEEE" />
                <Setter TargetName="Border" Property="BorderBrush" Value="#AAAAAA" />
                <Setter Property="Foreground" Value="#888888"/>
                <Setter TargetName="Arrow" Property="Fill" Value="#888888" />
            </Trigger>
        </ControlTemplate.Triggers>-->
    </ControlTemplate>

    <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
        <Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}" />
    </ControlTemplate>

    <Style x:Key="{x:Type ComboBox}" TargetType="{x:Type ComboBox}">
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource ToolTipDuration}"/>
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="Foreground" Value="{StaticResource TextColor}"/>
        <Setter Property="Background" Value="{StaticResource BackgroundSecondary}"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="Margin" Value="5,0,5,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <ToggleButton 
                            Name="ToggleButton" 
                            Template="{StaticResource ComboBoxToggleButton}" 
                            Grid.Column="2" 
                            Focusable="false"
                            IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                            ClickMode="Press">
                        </ToggleButton>
                        <ContentPresenter Name="ContentSite" IsHitTestVisible="True"  Content="{TemplateBinding SelectedItem}"
                            ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                            ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                            Margin="3"
                            Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ComboBox}}, 
                            Path=ActualWidth,
                            Converter={StaticResource DoubleConverter},ConverterParameter=1.4}"
                            VerticalAlignment="Center"
                            HorizontalAlignment="Left" />
                        <TextBox x:Name="PART_EditableTextBox"
                            Style="{x:Null}" 
                            Template="{StaticResource ComboBoxTextBox}" 
                            HorizontalAlignment="Left" 
                            VerticalAlignment="Center" 
                            Margin="3"
                            Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ComboBox}}, 
                            Path=ActualWidth,
                            Converter={StaticResource DoubleConverter},ConverterParameter=1.4}"
                            Focusable="True" 
                            Foreground="{StaticResource TextColor}"
                            Background="{TemplateBinding Background}"
                            Visibility="Hidden"
                            IsReadOnly="{TemplateBinding IsReadOnly}"/>
                        <Popup 
                            Name="Popup"
                            Placement="Bottom"
                            IsOpen="{TemplateBinding IsDropDownOpen}"
                            AllowsTransparency="True" 
                            Focusable="False"
                            PopupAnimation="Slide">

                            <Grid Name="DropDown"
                              SnapsToDevicePixels="True"                
                              MinWidth="{TemplateBinding ActualWidth}"
                              MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border 
                                x:Name="DropDownBorder"
                                Background="{TemplateBinding Background}"

                                BorderThickness="1"
                                BorderBrush="{Binding DetailColor}"/>
                                <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="False">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{DynamicResource BackgroundTernary}"/>
                            <Setter Property="Opacity" Value="0.6"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                        <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="0"/>
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0"/>
                        </Trigger>
                        <Trigger Property="IsEditable"  Value="True">
                            <Setter Property="IsTabStop" Value="false"/>
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
        </Style.Triggers>
    </Style>

    <!-- SimpleStyles: ComboBoxItem -->
    <Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Foreground" Value="{DynamicResource TextColor}"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border Name="Border"
                              Padding="2"
                              SnapsToDevicePixels="true">
                        <ContentPresenter />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource BackgroundPrimary}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{Binding DetailColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    
    <!-- Label Style -->
    <Style TargetType="Label">
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource ToolTipDuration}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextColor}"/>
    </Style>
    
    
    <!-- TabControl -->
    <Style TargetType="TabControl">
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource ToolTipDuration}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BackgroundSecondary}"/>
    </Style>

    <Style TargetType="TabItem">
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource ToolTipDuration}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabItem">
                    <Grid Name="Panel">
                        <ContentPresenter x:Name="ContentSite"
                                        VerticalAlignment="Center"
                                        HorizontalAlignment="Center"
                                        ContentSource="Header"
                                        Margin="10,2"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Panel" Property="Background" Value="{DynamicResource BackgroundSecondary}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter TargetName="Panel" Property="Background" Value="Transparent" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>